// top level functions

function borderTemplates() {
  return {  v: new borderTemplate( [[1, 0], [1, 1], [1, 2]] ),
            h: new borderTemplate( [[0, 1], [1, 1], [2, 1]] ),
            tl: new borderTemplate( [[1, 1], [1, 2], [2, 1]] ),
            tr: new borderTemplate( [[0, 1], [1, 1], [1, 2]] ),
            br: new borderTemplate( [[1, 0], [0, 1], [1, 1]] ),
            bl: new borderTemplate( [[1, 0], [1, 1], [2, 1]] )
          };
}

function draw(conf, state, ctx) {
  ctx.clearRect(0, 0, conf.resolution.x, conf.resolution.y);
  // fill background
  ctx.fillRect(0, 0, conf.resolution.x, conf.resolution.y);
  // draw borders
  ctx.fillStyle = '#00F';
  var borders = state.maze.borders;
  for (var i = 0; i < borders.length; i++) {
    drawBorder(conf.resolution.x / conf.resolution.fx, conf.resolution.y / conf.resolution.fy, ctx, borders[i]);
  }
  ctx.fillStyle = '#000';
}

function drawBorder(bwidth, bheight, ctx, border) {
  ctx.save();
  ctx.translate(bwidth * border.loc.x , bheight * border.loc.y );
  ctx.scale(bwidth / 3, bheight / 3);
  border.draw(ctx);
  ctx.restore();
}

function borderArray() {
  return [
          [3,2,2,2,2,2,2,2,2,2,2,2,2,4,3,2,2,2,2,2,2,2,2,2,2,2,2,4],
          [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
          [1,0,3,2,2,4,0,3,2,2,2,4,0,1,1,0,3,2,2,2,4,0,3,2,2,4,0,1],
          [1,0,1,0,0,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1],
          [1,0,5,2,2,6,0,5,2,2,2,6,0,5,6,0,5,2,2,2,6,0,5,2,2,6,0,1],
          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
          [1,0,3,2,2,4,0,3,4,0,3,2,2,2,2,2,2,4,0,3,4,0,3,2,2,4,0,1],
          [1,0,5,2,2,6,0,1,1,0,5,2,2,4,3,2,2,6,0,1,1,0,5,2,2,6,0,1],
          [1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1],
          [5,2,2,2,2,4,0,1,5,2,2,4,0,1,1,0,3,2,2,6,1,0,3,2,2,2,2,6],
          [0,0,0,0,0,1,0,1,3,2,2,6,0,5,6,0,5,2,2,4,1,0,1,0,0,0,0,0],
          [0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0],
          [0,0,0,0,0,1,0,1,1,0,3,2,2,2,2,2,2,4,0,1,1,0,1,0,0,0,0,0],
          [0,2,2,2,2,6,0,5,6,0,1,0,0,0,0,0,0,1,0,5,6,0,5,2,2,2,2,0],
          [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
          [0,2,2,2,2,4,0,3,4,0,1,0,0,0,0,0,0,1,0,3,4,0,3,2,2,2,2,0],
          [0,0,0,0,0,1,0,1,1,0,5,2,2,2,2,2,2,6,0,1,1,0,1,0,0,0,0,0],
          [0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0],
          [0,0,0,0,0,1,0,1,1,0,3,2,2,2,2,2,2,4,0,1,1,0,1,0,0,0,0,0],
          [3,2,2,2,2,6,0,5,6,0,5,2,2,4,3,2,2,6,0,5,6,0,5,2,2,2,2,4],
          [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
          [1,0,3,2,2,4,0,3,2,2,2,4,0,1,1,0,3,2,2,2,4,0,3,2,2,4,0,1],
          [1,0,5,2,4,1,0,5,2,2,2,6,0,5,6,0,5,2,2,2,6,0,1,3,2,6,0,1],
          [1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1],
          [5,2,4,0,1,1,0,3,4,0,3,2,2,2,2,2,2,4,0,3,4,0,1,1,0,3,2,6],
          [3,2,6,0,5,6,0,1,1,0,5,2,2,4,3,2,2,6,0,1,1,0,5,6,0,5,2,4],
          [1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1],
          [1,0,3,2,2,2,2,6,5,2,2,4,0,1,1,0,3,2,2,6,5,2,2,2,2,4,0,1],
          [1,0,5,2,2,2,2,2,2,2,2,6,0,5,6,0,5,2,2,2,2,2,2,2,2,6,0,1],
          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
          [5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6]  
         ];
}

function makeBorders(templates) {
  var ba = borderArray();
  var res = [];
  for (i in ba) {
    for (j in ba[i]) {
      var elem = ba[i][j];
      var templ;
      switch(elem)
      {
        case 1: {
          templ = templates.v;
          break;
        }
        case 2: {
          templ = templates.h;
          break;
        }
        case 3: {
          templ = templates.tl;
          break;
        }
        case 4: {
          templ = templates.tr;
          break;
        }
        case 5: {
          templ = templates.bl;
          break;
        }
        case 6: {
          templ = templates.br;
          break;
        }
        default: break;
      }
      if (elem != 0) {
        res.push(new border( {x: j, y: i }, templ ));
      }
    }
  }
  return res;
}

